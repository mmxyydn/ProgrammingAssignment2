swirl()
swirl
load(swirl)
library(swirl)
swirl()
TRUW == TRUE
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 < = 10
10 <= 10
5 != 7
NOT 5 == 7
5 NOT== 7
5 == 7 NOT
5 != 7
NOT 5 == 7
NOT5 == 7
info()
5 not equal 7
5 NOT EQUAL 7
NOT(5 == 7 )
! 5 == 7
FALSE & FALSE
TRUE & C(TRUE, FALSE, FALSE)
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints>7)
any(ints<0)
all(ints<0)
all(ints>0)
sys.date()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function("my first function!")
boring_function('My first function!')
boring_function
submit
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11, num=5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(vector,c(1.4, 3.6, 7.9, 8.8))
evaluate(standard deviation, c(1.4, 3.6, 7.9, 8.8))
?standard deviation
evaluateï¼ˆsd,c(1.4, 3.6, 7.9, 8.8))
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x-4},12)
evaluate(function(x){c(x,x-4,x-8)},8)
evaluate(function(x){x},c(8, 4, 0))
evaluate(function(x){x+1}, c(7,3,-1))
evaluate(function(x){c()})
info()
skip()
evaluate(function(x){x[3]},c(8,4,0))
evaluation(function(x){x[length(x)]},c(8,4,0))
evaluate (function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram(byebye)
telegram("byebye")
submit()
mab_libs(place="123",adjective="234",noun="345")
mad_libs(place="123",adjective="234",noun="345")
submit()
'I' %P% 'love' %P% 'R!'
'I' %p% 'love' %p%'R!'
x <- 1:10#
if(x > 5) {#
        x <- 0#
}
x <- 1:10#
if(x > 5) {#
        y=1#
}
swirl()
d1<- Sys.Date()
class(d1)
unclass(d1)
print(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
as.POSIXlt(Sys.time())
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <-  "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() - t1
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(),t1,units = "days")
?cor
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(clas_list)
as.character(cls_list)
sapply(flags,class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_coors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
lapply(shape_mat, unique)
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals,length)
sapply(flags, unique)
lapply(unique_vals, function(elem)elem[2])
sapply(flags, unique)
vapply(flages, unique, numeric(1))
vapply(flags, unique, numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
tapply(flags)
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass ,mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags&landmasses, summary)
tapply(flags$population, flags&landmass, summary)
tapply(flags$poplulation, flags$landmass ,summary)
tapply(flags$population, flags$landmass, summary)
debug(ls)
ls
git.init
